@mixin animation() {
    transition: all .4s ease;
}

@mixin define-header-sizes() {
    $index: 0;
    @each $breakpoint in map-keys($grid-breakpoints) {
        @include media-breakpoint-up($breakpoint) {
            @each $num in (6, 5, 4, 3, 2, 1) {
                h#{$num} {
                    font-size: toFixedRem(((6 - $num) * $BASE + $index * $BASE), $breakpoint);
                    line-height: toFixedRem(((6 - $num) * $BASE + $index * $BASE + $BASE), $breakpoint);
                }
            }
        }
        $index: $index + 1
    }
}

@mixin define-paragraph-sizes() {
    $index: 0;
    @each $breakpoint in map-keys($grid-breakpoints) {
        @include media-breakpoint-up($breakpoint) {
            @each $count, $class in (3: '', 4: '.lg', 2: '.sm', 1: '.xs') {
                p#{$class} {
                    font-size: toFixedRem($BASE * $count + $index * $BASE, $breakpoint);
                    line-height: toFixedRem($BASE * $count + $index * $BASE + 2 * $BASE, $breakpoint);
                }
            }
        }
        $index: $index + 1
    }
}

@mixin define-html-body-sizes() {
    $index: 0;
    @each $breakpoint in map-keys($grid-breakpoints) {
        @include media-breakpoint-up($breakpoint) {
            html {
                font-size: ($BASE_FONT_SIZE + $index * $BASE) * 1px;
            }
            body {
                font-size: toFixedRem(3 * $BASE + $index * $BASE, $breakpoint);
            }
        }
        $index: $index + 1
    }
}

@mixin letter-spacing() {
    letter-spacing: .25rem;
}

@mixin define-mp($prop, $direction, $size) {
    $index: 0;
    $additional: 0;
    @if($size == md) {
        $additional: 1;
    }
    @if($size == lg) {
        $additional: 2;
    }

    @each $breakpoint in map-keys($grid-breakpoints) {
        @include media-breakpoint-up($breakpoint) {
            @if($direction == null) {
                #{$prop}: toFixedRem($BASE * pow(2, $index + $additional), $breakpoint);
            }
            @if($direction == y) {
                #{$prop}-top: toFixedRem($BASE * pow(2, $index + $additional), $breakpoint);
                #{$prop}-bottom: toFixedRem($BASE * pow(2, $index + $additional), $breakpoint);
            }
            @if($direction == x) {
                #{$prop}-left: toFixedRem($BASE * pow(2, $index + $additional), $breakpoint);
                #{$prop}-right: toFixedRem($BASE * pow(2, $index + $additional), $breakpoint);
            }
            @if($direction == top){
                #{$prop}-top: toFixedRem($BASE * pow(2, $index + $additional), $breakpoint);
            }
            @if($direction == right){
                #{$prop}-right: toFixedRem($BASE * pow(2, $index + $additional), $breakpoint);
            }
            @if($direction == bottom){
                #{$prop}-bottom: toFixedRem($BASE * pow(2, $index + $additional), $breakpoint);
            }
            @if($direction == left){
                #{$prop}-left: toFixedRem($BASE * pow(2, $index + $additional), $breakpoint);
            }
        }
        $index: $index + 1
    }
}

@mixin margin($size, $direction:null) {
    @include define-mp(margin, $direction, $size);
}

@mixin padding($size, $direction:null) {
    @include define-mp(padding, $direction, $size);
}

@mixin define-prop($prop, $sizes) {
    @for $i from 1 through length($sizes) {
        $breakpoint: nth(map-keys($grid-breakpoints), $i);
        @include media-breakpoint-up($breakpoint) {
            #{$prop}: nth($sizes, $i);
        }
    }
}

@mixin define-prop-sizes($prop, $sizes) {
    @for $i from 1 through length($grid-breakpoints) {
        $breakpoint: nth(map-keys($grid-breakpoints), $i);
        @include media-breakpoint-up($breakpoint) {
            $size: nth($sizes, $i);
            #{$prop}: toFixedRem($size, $breakpoint);
        }
    }
}
